/**
 * Created by Xue Liang On 2017-07-11
 */
public class ObjectChain<T> implements java.util.Iterator<T>, Iterable<T> {

    private ObjectNode<T> first;
    private ObjectNode<T> cursor = null;

    public void push(T obj) {
        ObjectNode<T> node = new ObjectNode(obj);
        if (first == null) {
            this.first = node;
            this.cursor = this.first;
        } else {
            this.first.prefix = node;
            node.next = this.first;
            this.first = node;
        }
    }

    public T pop() {
        if (this.first == null) {
            return null;
        }
        ObjectNode<T> on = this.first;
        this.first = this.first.next;
        if (first != null) {
            this.first.prefix = null;
        }
        this.cursor = this.first;
        return on.data;
    }

    @Override
    public boolean hasNext() {
        return this.cursor != null;
    }

    public void clear() {
        this.first = null;
        this.cursor = this.first;
    }

    /**
     * cursor move to next node
     *
     * @return
     */
    @Override
    public T next() {
        if (this.cursor == null) {
            return null;
        }
        T value = cursor.getData();
        cursor = cursor.next();
        return value;
    }

    @Override
    public void remove() {
        if (cursor != null) {
            cursor.prefix.next = cursor.next;
        }
    }

    @Override
    public Iterator<T> iterator() {
        this.cursor = this.first;
        return this;
    }

    private class ObjectNode<T> {
        private ObjectNode<T> prefix = null;
        private T data;
        private ObjectNode<T> next = null;


        public ObjectNode(T obj) {
            this.data = obj;
        }

        public T getData() {
            return this.data;
        }

        public ObjectNode<T> next() {
            return this.next;
        }

        public ObjectNode<T> prefix() {
            return this.prefix;
        }
    }
}
